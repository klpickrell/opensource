#include <stdlib.h>
#include <math.h>
#include <cstring>

#include "CacheAnalysis.h"

using namespace std;


int CacheAnalysis::compare(WordElementType word1, WordElementType word2)
{
    if( word1.wordValue.empty() || word2.wordValue.empty() ) {
        throw CacheException( "attempt to compare empty words" );
    }

    if( word1.wordValue.size() > word2.wordValue.size() ) {
        return 1;
    } else if( word2.wordValue.size() > word1.wordValue.size() ) {
        return -1;
    } else {
        return memcmp( &word1.wordValue[0], &word2.wordValue[0], word1.wordValue.size() );
    }

    /*
    int ind;
//Inputs inp = cacheInp.getInputs();

    for (ind=0;ind < cacheInp->rValue/8; ind ++)
    {
        if (word1.wordValue[ind] > word2.wordValue[ind])
        {
            return 1;
        }
        else if (word1.wordValue[ind] < word2.wordValue[ind])
        {
            return -1;
        }
    }
    if (cacheInp->rValue%8)
    {
        if (word1.wordValue[ind] > word2.wordValue[ind])
        {
            return 1;
        }
        else if (word1.wordValue[ind] < word2.wordValue[ind])
        {
            return -1;
        }
    }
    return 0;
    */
}


bool CacheAnalysis::MoreWords()
{
    return (inpind < m_inputs->words.size());
}

void CacheAnalysis::StartAnalysis()
{
     inpind=0;
     cacheOup.countTotal=m_inputs->words.size();
     cacheOup.countNumHits=0;
     cacheOup.countNumMisses=0;
     cacheOup.countCompulsoryMisses=0;
     cacheOup.hitRatio=(cacheOup.countNumHits*1.0)/(cacheOup.countTotal);
     PerformCacheAnalysis();
     PerformTemporalAnalysis();
     inpind++;
}

void CacheAnalysis::ProcessNextWord()
{
     PerformTemporalAnalysis();
     PerformCacheAnalysis();
     cacheOup.hitRatio=(cacheOup.countNumHits*1.0)/(cacheOup.countNumHits+cacheOup.countNumMisses);
     inpind++;
}

unsigned int CacheAnalysis::GetInd(WordElementType &word)
{
    int ind;
    unsigned int index=0;
    double kvalue = logb( m_inputs->kValue );
    for (ind=0;ind < (int)(kvalue/8); ind ++)
    {
        index = (index << 8) | (unsigned char)(word.wordValue[ind]);
    }
/*
    if (cacheInp->kValue % 8)
    {
        index = (index << 8) | (((unsigned char)word.wordValue[ind]) & (0xFF00 >> cacheInp->kValue % 8));
    }
*/
    return index;
}

void CacheAnalysis::InsertLFU(list<WordElementType> &row)
{
    list<WordElementType>::iterator ind;
    WordElementType inpword,oupword;
    for (ind=row.begin();ind != row.end(); ind++)
    {
       oupword=*ind;
       if (compare(oupword,inpword) == 0)
       {
           row.erase(ind);
           row.push_front(oupword);
           cacheOup.countNumHits++;
           return;
       }
    }
    if ( (int)row.size() == m_inputs->mValue)
    {
        cacheOup.countNumMisses++;
        row.pop_front();
        row.push_back(inpword);
    }
    else
    {
        cacheOup.countCompulsoryMisses++;
        row.push_back(inpword);
    }
}

void CacheAnalysis::PerformCacheAnalysis()
{
   WordElementType inpword;
   int index;
   inpword=(WordElementType)m_inputs->words.at(inpind);

   index = GetInd(inpword); 
printf("getind done %d %d %d %d \n", m_inputs->kValue,m_inputs->rValue,m_inputs->mValue,index);

   InsertLFU(cacheMat[index]);
printf("insertLFU done\n");
   
/*
   cacheOup.countNumHits=rand()%10000+10000;
   cacheOup.countNumMisses=rand()%10000+10000;
   cacheOup.countCompulsoryMisses=rand()%100+100;

   cacheOup.hitRatio=(cacheOup.countNumHits*1.0)/(cacheOup.countNumHits+cacheOup.countNumMisses);
*/
}

void CacheAnalysis::PerformTemporalAnalysis()
{
   WordElementType inpword,oupword;
   unsigned int oupind; 
	//numWords,oupind;

   
  // for (inpind =0;inpind < cacheInp.words.size();inpind++)
   {
   for (oupind =0;oupind < cacheOup.words.size();oupind++)
   {
      inpword=(WordElementType)m_inputs->words.at(inpind);
      oupword=(WordElementType)cacheOup.words.at(oupind);
      if (compare(inpword,oupword) == 0)
      {
          cacheOup.words[oupind].integerCountReferenced++;
          break;
      }
   }
   if (oupind == cacheOup.words.size())
   {
       inpword.integerCountReferenced=1;
       cacheOup.words.push_back(inpword);
   }
   }
}

